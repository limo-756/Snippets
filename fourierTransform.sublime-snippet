<snippet>
  <content><![CDATA[
typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;
void fft(CArray &x)
{
  unsigned int N = x.size(), k = N, n;
  double thetaT = 3.14159265358979323846264338328L / N;
  Complex phiT = Complex(cos(thetaT), -sin(thetaT)), T;
  while (k > 1)
  {
    n = k;
    k >>= 1;
    phiT = phiT * phiT;
    T = 1.0L;
    for (unsigned int l = 0; l < k; l++)
    {
      for (unsigned int a = l; a < N; a += n)
      {
        unsigned int b = a + k;
        Complex t = x[a] - x[b];
        x[a] += x[b];
        x[b] = t * T;
      }
      T *= phiT;
    }
  }
  unsigned int m = (unsigned int)log2(N);
  for (unsigned int a = 0; a < N; a++)
  {
    unsigned int b = a;
    b = (((b & 0xaaaaaaaa) >> 1) | ((b & 0x55555555) << 1));
    b = (((b & 0xcccccccc) >> 2) | ((b & 0x33333333) << 2));
    b = (((b & 0xf0f0f0f0) >> 4) | ((b & 0x0f0f0f0f) << 4));
    b = (((b & 0xff00ff00) >> 8) | ((b & 0x00ff00ff) << 8));
    b = ((b >> 16) | (b << 16)) >> (32 - m);
    if (b > a)
    {
      Complex t = x[a];
      x[a] = x[b];
      x[b] = t;
    }
  }
  //// Normalize (This section make it not working correctly)
  //Complex f = 1.0 / sqrt(N);
  //for (unsigned int i = 0; i < N; i++)
  //  x[i] *= f;
}

// inverse fft (in-place)
void ifft(CArray& x)
{
  x = x.apply(std::conj);
  fft( x );
  x = x.apply(std::conj);
  x /= x.size();
}
double ${1:res}[${2:MAXN}];
Complex test_1[${2:MAXN}];
Complex test_2[${2:MAXN}];
int sol()
{
  int ${3:num} = 2*${4:n};
  rep(i,${4:n})
  {
    test_1[i] = ${5:arr1}[i];
    test_2[i] = ${5:arr2}[i];
  }
  CArray data_1(test_1, ${3:num});
  CArray data_2(test_2, ${3:num});
  // forward fft
  fft(data_1);
  fft(data_2);
  for (int i = 0; i < ${3:num}; ++i)
      data_1[i] = data_1[i] * data_2[i];
  ifft(data_1);
  for (int i = 0; i < ${3:num}; ++i)
    ${1:res}[i] = data_1[i].real();
  return 0;
}

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>fourier</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
